						REASONS OF SERVER DOWN

Server port number wrong/busy

Syntax error

version bugs

package support





======>MAKE A  SYSTEM DESIGN MODAL OF A WESITE(FLIPCART/SWIGGY/UBER/JIO ETC..)  PICTORIAL REPRESENTAION (CHART FORMAT) PPT




BACKEND PART

ROUTES
CONTROLLERS
MIDDLEWARES
SCHEMA DESIGN
AUTHENTICATION
DEPLOYEMENT



.....................................................................................................................................................................................



const path = require("path");




app.use(express.json());       //whenever app.use it means u are writing middlewares
app.use(express.static(path.resolve(__dirname,'./public')))



ON Terminal


npm start



IN PACKAGE.JSON

"start": "nodemon server.js"








const express = require("express")
const colors = require("colors")
const dotenv = require("dotenv").config()
const morgan = require("morgan")
const path = require("path");

const app = express();
const PORT = 8000;

app.use(express.json());       //whenever app.use it means u are writing middlewares
app.use(express.static(path.resolve(__dirname,'./public')))



// localhost : 8000
const data = [
    {
        name:"a",
        age:1
    },
    {
        name:"b",
        age:2
    },
    {
        name:"c",
        age:3
    },
    {
        name:"d",
        age:4
    },
    {
        name:"e",
        age:5
    }
]

app.get('/',(req,res)=>{
    res.send("<h1>Hello world written on root</h1>")
    console.log("changed console message")
});

app.get('/users',(req,res)=>{
    res.send(data);
    console.log("changed console message")
});

app.get('/home',(req,res)=>{
    res.sendFile(path.resolve(__dirname,"./public","page.html"));
});

app.get('/stopwatch',(req,res)=>{
    res.sendFile(path.resolve(__dirname,"./public","stopwatch.html"));
    console.log("stopwatch page opened")
});

// app.get('/users/greaterthan3',(req,res)=>{
//     const greaterthan3 = data.filter((users)=>
//     users.age>3);
//     res.send(greaterthan3);
//     console.log("changed console message")
// });


app.listen(PORT,()=>{
    console.log(`Server is running on https://localhost:${PORT}`.bgBlue.black)
})







				PRIORITY OF INDEX.HTML V/S RANDOME.HTML



SERVER SIDE RENDERING






			SERVER.JS




const express = require("express")
const colors = require("colors")
const dotenv = require("dotenv").config()
const morgan = require("morgan")
const path = require("path");
const products=require("./utility/productdata.json");
const rootroute =require("./routes/rootroutes.js");
const productroutes=require("./routes/productroutes.js")

const app = express();
const PORT = 8000 || 9000;

app.use(morgan("dev"));
app.use(express.json());       //whenever app.use it means u are writing middlewares

app.use(express.static(path.resolve(__dirname,'./public')))



// localhost : 8000
const data = [
    {
        name:"a",
        age:1
    },
    {
        name:"b",
        age:2
    },
    {
        name:"c",
        age:3
    },
    {
        name:"d",
        age:4
    },
    {
        name:"e",
        age:5
    }
]

app.get('/',(req,res)=>{
    res.send("<h1>Hello world written on root</h1>")
    console.log("changed console message")
});

app.get('/users',(req,res)=>{
    res.send(data);
    console.log("changed console message")
});
// app.get('/users/greaterthan3',(req,res)=>{
//     const greaterthan3 = data.filter((users)=>
//     users.age>3);
//     res.send(greaterthan3);
//     console.log("changed console message")
// });

app.get('/home',(req,res)=>{
    res.sendFile(path.resolve(__dirname,"./public","page.html"));
});

app.get('/stopwatch',(req,res)=>{
    res.sendFile(path.resolve(__dirname,"./public","stopwatch.html"));
    console.log("stopwatch page opened")
});

app.use("/",rootroute);
app.use("/products",productroutes);



//server creation
app.listen(PORT,()=>{
    console.log(`Server is running on https://localhost:${PORT}`.bgBlue.black)
})








CONTROLLER

const express = require("express")
const colors = require("colors")
const dotenv = require("dotenv").config()
const morgan = require("morgan")
const path = require("path");
const products=require("./utility/productdata.json");
const rootroute =require("./routes/rootroutes.js");
const productroutes=require("./routes/productroutes.js")

const app = express();
const PORT = 8000 || 9000;

app.use(morgan("dev"));
app.use(express.json());       //whenever app.use it means u are writing middlewares

app.use(express.static(path.resolve(__dirname,'./public')))



// localhost : 8000
const data = [
    {
        name:"a",
        age:1
    },
    {
        name:"b",
        age:2
    },
    {
        name:"c",
        age:3
    },
    {
        name:"d",
        age:4
    },
    {
        name:"e",
        age:5
    }
]

app.get('/',(req,res)=>{
    res.send("<h1>Hello world written on root</h1>")
    console.log("changed console message")
});

app.get('/users',(req,res)=>{
    res.send(data);
    console.log("changed console message")
});
// app.get('/users/greaterthan3',(req,res)=>{
//     const greaterthan3 = data.filter((users)=>
//     users.age>3);
//     res.send(greaterthan3);
//     console.log("changed console message")
// });

app.get('/home',(req,res)=>{
    res.sendFile(path.resolve(__dirname,"./public","page.html"));
});

app.get('/stopwatch',(req,res)=>{
    res.sendFile(path.resolve(__dirname,"./public","stopwatch.html"));
    console.log("stopwatch page opened")
});

app.use("/",rootroute);
app.use("/products",productroutes);



//server creation
app.listen(PORT,()=>{
    console.log(`Server is running on https://localhost:${PORT}`.bgBlue.black)
})




const rootcontroller = (req,res)=>{
    res.send("<h1>Hello world written on root</h1>")
    console.log("changed console message")
};

module.exports = rootcontroller;



ROUTES


const productcontroller = require("../controllers/productcontroller")

const express=require("express");

const router = express.Router();

router.get('/',productcontroller);

router.get("/name/:name",productcontroller);

module.exports = router;




const rootcontroller = require("../controllers/rootcontroller")
const express=require("express");
const router = express.Router();
router.get('/',rootcontroller);
module.exports = router;
